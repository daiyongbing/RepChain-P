// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package rep.protos.peer



/** NonHashData is data that is recorded on the block, but not included in
  * the block hash when verifying the blockchain.
  * localLedgerCommitTimestamp - The time at which the block was added
  * to the ledger on the local peer.
  *
  * @param localLedgerCommitTimestamp
  *  添加链的时间，正式出块时间
  * @param transactionResults
  *  背书中各个交易预执行结果
  */
@SerialVersionUID(0L)
final case class NonHashData(
    localLedgerCommitTimestamp: scala.Option[com.google.protobuf.timestamp.Timestamp] = None,
    transactionResults: _root_.scala.collection.Seq[rep.protos.peer.TransactionResult] = _root_.scala.collection.Seq.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[NonHashData] with com.trueaccord.lenses.Updatable[NonHashData] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (localLedgerCommitTimestamp.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(localLedgerCommitTimestamp.get.serializedSize) + localLedgerCommitTimestamp.get.serializedSize }
      transactionResults.foreach(transactionResults => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(transactionResults.serializedSize) + transactionResults.serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      localLedgerCommitTimestamp.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      transactionResults.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): rep.protos.peer.NonHashData = {
      var __localLedgerCommitTimestamp = this.localLedgerCommitTimestamp
      val __transactionResults = (_root_.scala.collection.immutable.Vector.newBuilder[rep.protos.peer.TransactionResult] ++= this.transactionResults)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __localLedgerCommitTimestamp = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __localLedgerCommitTimestamp.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)))
          case 18 =>
            __transactionResults += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, rep.protos.peer.TransactionResult.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      rep.protos.peer.NonHashData(
          localLedgerCommitTimestamp = __localLedgerCommitTimestamp,
          transactionResults = __transactionResults.result()
      )
    }
    def getLocalLedgerCommitTimestamp: com.google.protobuf.timestamp.Timestamp = localLedgerCommitTimestamp.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
    def clearLocalLedgerCommitTimestamp: NonHashData = copy(localLedgerCommitTimestamp = None)
    def withLocalLedgerCommitTimestamp(__v: com.google.protobuf.timestamp.Timestamp): NonHashData = copy(localLedgerCommitTimestamp = Some(__v))
    def clearTransactionResults = copy(transactionResults = _root_.scala.collection.Seq.empty)
    def addTransactionResults(__vs: rep.protos.peer.TransactionResult*): NonHashData = addAllTransactionResults(__vs)
    def addAllTransactionResults(__vs: TraversableOnce[rep.protos.peer.TransactionResult]): NonHashData = copy(transactionResults = transactionResults ++ __vs)
    def withTransactionResults(__v: _root_.scala.collection.Seq[rep.protos.peer.TransactionResult]): NonHashData = copy(transactionResults = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => localLedgerCommitTimestamp.orNull
        case 2 => transactionResults
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => localLedgerCommitTimestamp.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(transactionResults.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = rep.protos.peer.NonHashData
}

object NonHashData extends com.trueaccord.scalapb.GeneratedMessageCompanion[rep.protos.peer.NonHashData] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[rep.protos.peer.NonHashData] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): rep.protos.peer.NonHashData = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    rep.protos.peer.NonHashData(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[com.google.protobuf.timestamp.Timestamp]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[rep.protos.peer.TransactionResult]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[rep.protos.peer.NonHashData] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      rep.protos.peer.NonHashData(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[com.google.protobuf.timestamp.Timestamp]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[rep.protos.peer.TransactionResult]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PeerProto.javaDescriptor.getMessageTypes.get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PeerProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = com.google.protobuf.timestamp.Timestamp
      case 2 => __out = rep.protos.peer.TransactionResult
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = rep.protos.peer.NonHashData(
  )
  implicit class NonHashDataLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, rep.protos.peer.NonHashData]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, rep.protos.peer.NonHashData](_l) {
    def localLedgerCommitTimestamp: _root_.com.trueaccord.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getLocalLedgerCommitTimestamp)((c_, f_) => c_.copy(localLedgerCommitTimestamp = Some(f_)))
    def optionalLocalLedgerCommitTimestamp: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.localLedgerCommitTimestamp)((c_, f_) => c_.copy(localLedgerCommitTimestamp = f_))
    def transactionResults: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[rep.protos.peer.TransactionResult]] = field(_.transactionResults)((c_, f_) => c_.copy(transactionResults = f_))
  }
  final val LOCALLEDGERCOMMITTIMESTAMP_FIELD_NUMBER = 1
  final val TRANSACTIONRESULTS_FIELD_NUMBER = 2
}

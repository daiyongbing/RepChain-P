// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package rep.protos.peer



@SerialVersionUID(0L)
final case class BlockchainInfo(
    height: Long = 0L,
    totalTransactions: Long = 0L,
    currentBlockHash: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    previousBlockHash: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    currentWorldStateHash: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[BlockchainInfo] with com.trueaccord.lenses.Updatable[BlockchainInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (height != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, height) }
      if (totalTransactions != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, totalTransactions) }
      if (currentBlockHash != _root_.com.google.protobuf.ByteString.EMPTY) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(3, currentBlockHash) }
      if (previousBlockHash != _root_.com.google.protobuf.ByteString.EMPTY) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(4, previousBlockHash) }
      if (currentWorldStateHash != _root_.com.google.protobuf.ByteString.EMPTY) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(5, currentWorldStateHash) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = height
        if (__v != 0L) {
          _output__.writeUInt64(1, __v)
        }
      };
      {
        val __v = totalTransactions
        if (__v != 0L) {
          _output__.writeUInt64(2, __v)
        }
      };
      {
        val __v = currentBlockHash
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(3, __v)
        }
      };
      {
        val __v = previousBlockHash
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(4, __v)
        }
      };
      {
        val __v = currentWorldStateHash
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(5, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): rep.protos.peer.BlockchainInfo = {
      var __height = this.height
      var __totalTransactions = this.totalTransactions
      var __currentBlockHash = this.currentBlockHash
      var __previousBlockHash = this.previousBlockHash
      var __currentWorldStateHash = this.currentWorldStateHash
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __height = _input__.readUInt64()
          case 16 =>
            __totalTransactions = _input__.readUInt64()
          case 26 =>
            __currentBlockHash = _input__.readBytes()
          case 34 =>
            __previousBlockHash = _input__.readBytes()
          case 42 =>
            __currentWorldStateHash = _input__.readBytes()
          case tag => _input__.skipField(tag)
        }
      }
      rep.protos.peer.BlockchainInfo(
          height = __height,
          totalTransactions = __totalTransactions,
          currentBlockHash = __currentBlockHash,
          previousBlockHash = __previousBlockHash,
          currentWorldStateHash = __currentWorldStateHash
      )
    }
    def withHeight(__v: Long): BlockchainInfo = copy(height = __v)
    def withTotalTransactions(__v: Long): BlockchainInfo = copy(totalTransactions = __v)
    def withCurrentBlockHash(__v: _root_.com.google.protobuf.ByteString): BlockchainInfo = copy(currentBlockHash = __v)
    def withPreviousBlockHash(__v: _root_.com.google.protobuf.ByteString): BlockchainInfo = copy(previousBlockHash = __v)
    def withCurrentWorldStateHash(__v: _root_.com.google.protobuf.ByteString): BlockchainInfo = copy(currentWorldStateHash = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = height
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = totalTransactions
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = currentBlockHash
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 4 => {
          val __t = previousBlockHash
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 5 => {
          val __t = currentWorldStateHash
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(height)
        case 2 => _root_.scalapb.descriptors.PLong(totalTransactions)
        case 3 => _root_.scalapb.descriptors.PByteString(currentBlockHash)
        case 4 => _root_.scalapb.descriptors.PByteString(previousBlockHash)
        case 5 => _root_.scalapb.descriptors.PByteString(currentWorldStateHash)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = rep.protos.peer.BlockchainInfo
}

object BlockchainInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[rep.protos.peer.BlockchainInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[rep.protos.peer.BlockchainInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): rep.protos.peer.BlockchainInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    rep.protos.peer.BlockchainInfo(
      __fieldsMap.getOrElse(__fields.get(0), 0L).asInstanceOf[Long],
      __fieldsMap.getOrElse(__fields.get(1), 0L).asInstanceOf[Long],
      __fieldsMap.getOrElse(__fields.get(2), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(3), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(4), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[rep.protos.peer.BlockchainInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      rep.protos.peer.BlockchainInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PeerProto.javaDescriptor.getMessageTypes.get(12)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PeerProto.scalaDescriptor.messages(12)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = rep.protos.peer.BlockchainInfo(
  )
  implicit class BlockchainInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, rep.protos.peer.BlockchainInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, rep.protos.peer.BlockchainInfo](_l) {
    def height: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.height)((c_, f_) => c_.copy(height = f_))
    def totalTransactions: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.totalTransactions)((c_, f_) => c_.copy(totalTransactions = f_))
    def currentBlockHash: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.currentBlockHash)((c_, f_) => c_.copy(currentBlockHash = f_))
    def previousBlockHash: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.previousBlockHash)((c_, f_) => c_.copy(previousBlockHash = f_))
    def currentWorldStateHash: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.currentWorldStateHash)((c_, f_) => c_.copy(currentWorldStateHash = f_))
  }
  final val HEIGHT_FIELD_NUMBER = 1
  final val TOTALTRANSACTIONS_FIELD_NUMBER = 2
  final val CURRENTBLOCKHASH_FIELD_NUMBER = 3
  final val PREVIOUSBLOCKHASH_FIELD_NUMBER = 4
  final val CURRENTWORLDSTATEHASH_FIELD_NUMBER = 5
}

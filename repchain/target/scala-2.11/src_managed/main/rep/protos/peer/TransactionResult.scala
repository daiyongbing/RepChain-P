// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package rep.protos.peer



/** 交易结果(背书中针对各个交易再进行单独背书)
  * 背书请求的应答（针对block中的各个交易）
  *
  * @param txid
  *  唯一标识一个Transaction
  * @param ol
  *   result - The return value of the transaction.
  * @param errorCode
  *   errorCode - An error code. 5xx will be logged as a failure in the dashboard.
  * @param error
  *   error - An error string for logging an issue.
  */
@SerialVersionUID(0L)
final case class TransactionResult(
    txid: String = "",
    ol: _root_.scala.collection.Seq[rep.protos.peer.OperLog] = _root_.scala.collection.Seq.empty,
    errorCode: Int = 0,
    error: String = ""
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[TransactionResult] with com.trueaccord.lenses.Updatable[TransactionResult] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (txid != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, txid) }
      ol.foreach(ol => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ol.serializedSize) + ol.serializedSize)
      if (errorCode != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, errorCode) }
      if (error != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, error) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = txid
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      ol.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = errorCode
        if (__v != 0) {
          _output__.writeUInt32(3, __v)
        }
      };
      {
        val __v = error
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): rep.protos.peer.TransactionResult = {
      var __txid = this.txid
      val __ol = (_root_.scala.collection.immutable.Vector.newBuilder[rep.protos.peer.OperLog] ++= this.ol)
      var __errorCode = this.errorCode
      var __error = this.error
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __txid = _input__.readString()
          case 18 =>
            __ol += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, rep.protos.peer.OperLog.defaultInstance)
          case 24 =>
            __errorCode = _input__.readUInt32()
          case 34 =>
            __error = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      rep.protos.peer.TransactionResult(
          txid = __txid,
          ol = __ol.result(),
          errorCode = __errorCode,
          error = __error
      )
    }
    def withTxid(__v: String): TransactionResult = copy(txid = __v)
    def clearOl = copy(ol = _root_.scala.collection.Seq.empty)
    def addOl(__vs: rep.protos.peer.OperLog*): TransactionResult = addAllOl(__vs)
    def addAllOl(__vs: TraversableOnce[rep.protos.peer.OperLog]): TransactionResult = copy(ol = ol ++ __vs)
    def withOl(__v: _root_.scala.collection.Seq[rep.protos.peer.OperLog]): TransactionResult = copy(ol = __v)
    def withErrorCode(__v: Int): TransactionResult = copy(errorCode = __v)
    def withError(__v: String): TransactionResult = copy(error = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = txid
          if (__t != "") __t else null
        }
        case 2 => ol
        case 3 => {
          val __t = errorCode
          if (__t != 0) __t else null
        }
        case 4 => {
          val __t = error
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(txid)
        case 2 => _root_.scalapb.descriptors.PRepeated(ol.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 3 => _root_.scalapb.descriptors.PInt(errorCode)
        case 4 => _root_.scalapb.descriptors.PString(error)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = rep.protos.peer.TransactionResult
}

object TransactionResult extends com.trueaccord.scalapb.GeneratedMessageCompanion[rep.protos.peer.TransactionResult] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[rep.protos.peer.TransactionResult] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): rep.protos.peer.TransactionResult = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    rep.protos.peer.TransactionResult(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[rep.protos.peer.OperLog]],
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[rep.protos.peer.TransactionResult] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      rep.protos.peer.TransactionResult(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[rep.protos.peer.OperLog]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PeerProto.javaDescriptor.getMessageTypes.get(10)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PeerProto.scalaDescriptor.messages(10)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => __out = rep.protos.peer.OperLog
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = rep.protos.peer.TransactionResult(
  )
  implicit class TransactionResultLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, rep.protos.peer.TransactionResult]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, rep.protos.peer.TransactionResult](_l) {
    def txid: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.txid)((c_, f_) => c_.copy(txid = f_))
    def ol: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[rep.protos.peer.OperLog]] = field(_.ol)((c_, f_) => c_.copy(ol = f_))
    def errorCode: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.errorCode)((c_, f_) => c_.copy(errorCode = f_))
    def error: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.error)((c_, f_) => c_.copy(error = f_))
  }
  final val TXID_FIELD_NUMBER = 1
  final val OL_FIELD_NUMBER = 2
  final val ERRORCODE_FIELD_NUMBER = 3
  final val ERROR_FIELD_NUMBER = 4
}

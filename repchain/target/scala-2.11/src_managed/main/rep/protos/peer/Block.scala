// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package rep.protos.peer



/** @param version
  *   version - Version used to track any protocol changes.
  * @param timestamp
  *   timestamp - The time at which the block or transaction order was proposed.
  *  This may not be used by all consensus modules.
  *  背书时间
  * @param transactions
  *   transactions - The ordered list of transactions in the block.
  * @param stateHash
  *   stateHash - The state hash after running transactions in this block.
  *   worldstate hash
  * @param previousBlockHash
  *   previousBlockHash - The hash of the previous block in the chain.
  *  pre block statehash
  * @param consensusMetadata
  *   consensusMetadata - Consensus modules may optionally store any
  *   additional metadata in this field.
  *  用来保存背书的
  *  bytes consensusMetadata = 6;
  * @param nonHashData
  *   nonHashData - Data stored with the block, but not included in the blocks
  *   hash. This allows this data to be different per peer or discarded without
  *   impacting the blockchain.
  */
@SerialVersionUID(0L)
final case class Block(
    version: Int = 0,
    timestamp: scala.Option[com.google.protobuf.timestamp.Timestamp] = None,
    transactions: _root_.scala.collection.Seq[rep.protos.peer.Transaction] = _root_.scala.collection.Seq.empty,
    stateHash: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    previousBlockHash: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    consensusMetadata: _root_.scala.collection.Seq[rep.protos.peer.Endorsement] = _root_.scala.collection.Seq.empty,
    nonHashData: scala.Option[rep.protos.peer.NonHashData] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Block] with com.trueaccord.lenses.Updatable[Block] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (version != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, version) }
      if (timestamp.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(timestamp.get.serializedSize) + timestamp.get.serializedSize }
      transactions.foreach(transactions => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(transactions.serializedSize) + transactions.serializedSize)
      if (stateHash != _root_.com.google.protobuf.ByteString.EMPTY) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(4, stateHash) }
      if (previousBlockHash != _root_.com.google.protobuf.ByteString.EMPTY) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(5, previousBlockHash) }
      consensusMetadata.foreach(consensusMetadata => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(consensusMetadata.serializedSize) + consensusMetadata.serializedSize)
      if (nonHashData.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(nonHashData.get.serializedSize) + nonHashData.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = version
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      timestamp.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      transactions.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = stateHash
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(4, __v)
        }
      };
      {
        val __v = previousBlockHash
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(5, __v)
        }
      };
      consensusMetadata.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      nonHashData.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): rep.protos.peer.Block = {
      var __version = this.version
      var __timestamp = this.timestamp
      val __transactions = (_root_.scala.collection.immutable.Vector.newBuilder[rep.protos.peer.Transaction] ++= this.transactions)
      var __stateHash = this.stateHash
      var __previousBlockHash = this.previousBlockHash
      val __consensusMetadata = (_root_.scala.collection.immutable.Vector.newBuilder[rep.protos.peer.Endorsement] ++= this.consensusMetadata)
      var __nonHashData = this.nonHashData
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __version = _input__.readUInt32()
          case 18 =>
            __timestamp = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __timestamp.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)))
          case 26 =>
            __transactions += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, rep.protos.peer.Transaction.defaultInstance)
          case 34 =>
            __stateHash = _input__.readBytes()
          case 42 =>
            __previousBlockHash = _input__.readBytes()
          case 50 =>
            __consensusMetadata += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, rep.protos.peer.Endorsement.defaultInstance)
          case 58 =>
            __nonHashData = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __nonHashData.getOrElse(rep.protos.peer.NonHashData.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      rep.protos.peer.Block(
          version = __version,
          timestamp = __timestamp,
          transactions = __transactions.result(),
          stateHash = __stateHash,
          previousBlockHash = __previousBlockHash,
          consensusMetadata = __consensusMetadata.result(),
          nonHashData = __nonHashData
      )
    }
    def withVersion(__v: Int): Block = copy(version = __v)
    def getTimestamp: com.google.protobuf.timestamp.Timestamp = timestamp.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
    def clearTimestamp: Block = copy(timestamp = None)
    def withTimestamp(__v: com.google.protobuf.timestamp.Timestamp): Block = copy(timestamp = Some(__v))
    def clearTransactions = copy(transactions = _root_.scala.collection.Seq.empty)
    def addTransactions(__vs: rep.protos.peer.Transaction*): Block = addAllTransactions(__vs)
    def addAllTransactions(__vs: TraversableOnce[rep.protos.peer.Transaction]): Block = copy(transactions = transactions ++ __vs)
    def withTransactions(__v: _root_.scala.collection.Seq[rep.protos.peer.Transaction]): Block = copy(transactions = __v)
    def withStateHash(__v: _root_.com.google.protobuf.ByteString): Block = copy(stateHash = __v)
    def withPreviousBlockHash(__v: _root_.com.google.protobuf.ByteString): Block = copy(previousBlockHash = __v)
    def clearConsensusMetadata = copy(consensusMetadata = _root_.scala.collection.Seq.empty)
    def addConsensusMetadata(__vs: rep.protos.peer.Endorsement*): Block = addAllConsensusMetadata(__vs)
    def addAllConsensusMetadata(__vs: TraversableOnce[rep.protos.peer.Endorsement]): Block = copy(consensusMetadata = consensusMetadata ++ __vs)
    def withConsensusMetadata(__v: _root_.scala.collection.Seq[rep.protos.peer.Endorsement]): Block = copy(consensusMetadata = __v)
    def getNonHashData: rep.protos.peer.NonHashData = nonHashData.getOrElse(rep.protos.peer.NonHashData.defaultInstance)
    def clearNonHashData: Block = copy(nonHashData = None)
    def withNonHashData(__v: rep.protos.peer.NonHashData): Block = copy(nonHashData = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = version
          if (__t != 0) __t else null
        }
        case 2 => timestamp.orNull
        case 3 => transactions
        case 4 => {
          val __t = stateHash
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 5 => {
          val __t = previousBlockHash
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 6 => consensusMetadata
        case 7 => nonHashData.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(version)
        case 2 => timestamp.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(transactions.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 4 => _root_.scalapb.descriptors.PByteString(stateHash)
        case 5 => _root_.scalapb.descriptors.PByteString(previousBlockHash)
        case 6 => _root_.scalapb.descriptors.PRepeated(consensusMetadata.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 7 => nonHashData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = rep.protos.peer.Block
}

object Block extends com.trueaccord.scalapb.GeneratedMessageCompanion[rep.protos.peer.Block] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[rep.protos.peer.Block] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): rep.protos.peer.Block = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    rep.protos.peer.Block(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[Int],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.google.protobuf.timestamp.Timestamp]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[rep.protos.peer.Transaction]],
      __fieldsMap.getOrElse(__fields.get(3), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(4), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[rep.protos.peer.Endorsement]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[rep.protos.peer.NonHashData]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[rep.protos.peer.Block] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      rep.protos.peer.Block(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[com.google.protobuf.timestamp.Timestamp]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[rep.protos.peer.Transaction]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.collection.Seq[rep.protos.peer.Endorsement]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[rep.protos.peer.NonHashData]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PeerProto.javaDescriptor.getMessageTypes.get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PeerProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => __out = com.google.protobuf.timestamp.Timestamp
      case 3 => __out = rep.protos.peer.Transaction
      case 6 => __out = rep.protos.peer.Endorsement
      case 7 => __out = rep.protos.peer.NonHashData
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = rep.protos.peer.Block(
  )
  implicit class BlockLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, rep.protos.peer.Block]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, rep.protos.peer.Block](_l) {
    def version: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def timestamp: _root_.com.trueaccord.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getTimestamp)((c_, f_) => c_.copy(timestamp = Some(f_)))
    def optionalTimestamp: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
    def transactions: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[rep.protos.peer.Transaction]] = field(_.transactions)((c_, f_) => c_.copy(transactions = f_))
    def stateHash: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.stateHash)((c_, f_) => c_.copy(stateHash = f_))
    def previousBlockHash: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.previousBlockHash)((c_, f_) => c_.copy(previousBlockHash = f_))
    def consensusMetadata: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[rep.protos.peer.Endorsement]] = field(_.consensusMetadata)((c_, f_) => c_.copy(consensusMetadata = f_))
    def nonHashData: _root_.com.trueaccord.lenses.Lens[UpperPB, rep.protos.peer.NonHashData] = field(_.getNonHashData)((c_, f_) => c_.copy(nonHashData = Some(f_)))
    def optionalNonHashData: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[rep.protos.peer.NonHashData]] = field(_.nonHashData)((c_, f_) => c_.copy(nonHashData = f_))
  }
  final val VERSION_FIELD_NUMBER = 1
  final val TIMESTAMP_FIELD_NUMBER = 2
  final val TRANSACTIONS_FIELD_NUMBER = 3
  final val STATEHASH_FIELD_NUMBER = 4
  final val PREVIOUSBLOCKHASH_FIELD_NUMBER = 5
  final val CONSENSUSMETADATA_FIELD_NUMBER = 6
  final val NONHASHDATA_FIELD_NUMBER = 7
}
